{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nXcelerate is a modern meme token launchpad built on X Layer (OKX zkEVM L2) blockchain. It's a full-stack web application that enables users to create, trade, and discover meme tokens through a bonding curve mechanism. Tokens automatically graduate to DEX liquidity pools once they reach an 80 OKB trading volume threshold. The platform features real-time trading, portfolio management, and comprehensive analytics.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 19 with TypeScript in strict mode\n- **Styling**: Tailwind CSS with shadcn/ui component library using the \"new-york\" style\n- **State Management**: TanStack React Query for server state and caching\n- **Web3 Integration**: Wagmi + RainbowKit for wallet connections and blockchain interactions\n- **Routing**: Wouter for lightweight client-side routing\n- **Animations**: Framer Motion for smooth UI transitions\n- **Design System**: Dark theme with glassmorphism effects, neutral color palette with CSS variables\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Session Management**: In-memory storage with planned PostgreSQL migration\n- **API Design**: RESTful endpoints following `/api/*` pattern\n- **Build Process**: Vite for development, esbuild for production bundling\n\n## Database Schema Design\nThe application uses a relational database structure with the following core entities:\n- **Users**: Wallet address-based authentication\n- **Tokens**: ERC20 tokens with bonding curve parameters\n- **Trades**: Buy/sell transaction records\n- **Holdings**: User token balances with P&L tracking\n- **Platform Stats**: Aggregated analytics and metrics\n\nKey design decisions include using decimal types for precise financial calculations and UUIDs for primary keys to avoid enumeration attacks.\n\n## Blockchain Integration\n- **Target Network**: X Layer (Chain ID 196) with OKB as native currency\n- **Smart Contracts**: Token factory, bonding curve, and liquidity management\n- **Trading Mechanism**: Automated Market Maker (AMM) with bonding curves\n- **Graduation Logic**: Automatic DEX listing at 80 OKB trading volume\n- **Fee Structure**: Multi-tier fee distribution (platform, creator, stakers, liquidity providers)\n\n## Authentication & Authorization\n- **Wallet-Based Auth**: No traditional login system, uses Web3 wallet signatures\n- **User Creation**: Automatic user record creation on first wallet connection\n- **Session Persistence**: Browser-based session management\n- **Authorization**: Address-based ownership validation for token operations\n\n# External Dependencies\n\n## Blockchain & Web3\n- **Wagmi**: Web3 React hooks for Ethereum interactions\n- **RainbowKit**: Wallet connection UI and management\n- **Viem**: TypeScript library for Ethereum interactions\n- **Neon Database**: Serverless PostgreSQL database provider\n\n## UI & Design\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n- **Framer Motion**: Animation library for smooth transitions\n- **Embla Carousel**: Carousel component library\n\n## Data Management\n- **TanStack React Query**: Server state management and caching\n- **React Hook Form**: Form validation and management\n- **Zod**: TypeScript-first schema validation\n- **Drizzle ORM**: Type-safe database ORM\n\n## Development & Build Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Static type checking\n- **ESLint/Prettier**: Code linting and formatting\n- **PostCSS**: CSS processing\n- **esbuild**: Fast JavaScript bundler for production\n\n## Infrastructure\n- **Replit**: Development and hosting platform\n- **PostgreSQL**: Primary database (Neon serverless)\n- **Connect PG Simple**: PostgreSQL session store\n- **Express Session**: Session middleware","size_bytes":3970},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        slideUp: {\n          from: { \n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: { \n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3240},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertTokenSchema, insertTradeSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByWallet(userData.walletAddress);\n      if (existingUser) {\n        return res.json(existingUser);\n      }\n      \n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\", error });\n    }\n  });\n\n  app.get(\"/api/users/:walletAddress\", async (req, res) => {\n    try {\n      const user = await storage.getUserByWallet(req.params.walletAddress);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\", error });\n    }\n  });\n\n  // Token routes\n  app.get(\"/api/tokens\", async (req, res) => {\n    try {\n      const { graduated } = req.query;\n      const filter = graduated !== undefined ? { isGraduated: graduated === 'true' } : undefined;\n      const tokens = await storage.getAllTokens(filter);\n      res.json(tokens);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tokens\", error });\n    }\n  });\n\n  app.get(\"/api/tokens/:id\", async (req, res) => {\n    try {\n      const token = await storage.getToken(req.params.id);\n      if (!token) {\n        return res.status(404).json({ message: \"Token not found\" });\n      }\n      res.json(token);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch token\", error });\n    }\n  });\n\n  app.post(\"/api/tokens\", async (req, res) => {\n    try {\n      const tokenData = insertTokenSchema.parse(req.body);\n      const { creatorWallet, contractAddress } = req.body;\n      \n      if (!creatorWallet || !contractAddress) {\n        return res.status(400).json({ message: \"Creator wallet and contract address required\" });\n      }\n      \n      // Get or create user\n      let user = await storage.getUserByWallet(creatorWallet);\n      if (!user) {\n        user = await storage.createUser({ walletAddress: creatorWallet });\n      }\n      \n      const token = await storage.createToken({\n        ...tokenData,\n        creatorId: user.id,\n        address: contractAddress,\n      });\n      \n      res.json(token);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid token data\", error });\n    }\n  });\n\n  app.patch(\"/api/tokens/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const token = await storage.updateToken(req.params.id, updates);\n      if (!token) {\n        return res.status(404).json({ message: \"Token not found\" });\n      }\n      res.json(token);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update token\", error });\n    }\n  });\n\n  // Trade routes\n  app.get(\"/api/trades\", async (req, res) => {\n    try {\n      const { tokenId, userId } = req.query;\n      \n      let trades;\n      if (tokenId) {\n        trades = await storage.getTradesByToken(tokenId as string);\n      } else if (userId) {\n        trades = await storage.getTradesByUser(userId as string);\n      } else {\n        return res.status(400).json({ message: \"tokenId or userId required\" });\n      }\n      \n      res.json(trades);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch trades\", error });\n    }\n  });\n\n  app.post(\"/api/trades\", async (req, res) => {\n    try {\n      const tradeData = insertTradeSchema.parse(req.body);\n      const { userWallet } = req.body;\n      \n      if (!userWallet) {\n        return res.status(400).json({ message: \"User wallet required\" });\n      }\n      \n      // Get or create user\n      let user = await storage.getUserByWallet(userWallet);\n      if (!user) {\n        user = await storage.createUser({ walletAddress: userWallet });\n      }\n      \n      const trade = await storage.createTrade({\n        ...tradeData,\n        userId: user.id,\n      });\n      \n      // Update holdings\n      const currentHolding = await storage.getHolding(user.id, tradeData.tokenId);\n      const currentBalance = parseFloat(currentHolding?.balance || '0');\n      const tradeAmount = parseFloat(tradeData.tokenAmount);\n      \n      let newBalance;\n      let newTotalInvested = parseFloat(currentHolding?.totalInvested || '0');\n      \n      if (tradeData.type === 'buy') {\n        newBalance = currentBalance + tradeAmount;\n        newTotalInvested += parseFloat(tradeData.okbAmount);\n      } else {\n        newBalance = Math.max(0, currentBalance - tradeAmount);\n        const sellRatio = tradeAmount / currentBalance;\n        newTotalInvested *= (1 - sellRatio);\n      }\n      \n      await storage.updateHolding(user.id, tradeData.tokenId, {\n        balance: newBalance.toString(),\n        totalInvested: newTotalInvested.toString(),\n        avgBuyPrice: newBalance > 0 ? (newTotalInvested / newBalance).toString() : null,\n      });\n      \n      res.json(trade);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid trade data\", error });\n    }\n  });\n\n  // Portfolio routes\n  app.get(\"/api/portfolio/:walletAddress\", async (req, res) => {\n    try {\n      const user = await storage.getUserByWallet(req.params.walletAddress);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const holdings = await storage.getHoldingsByUser(user.id);\n      const trades = await storage.getTradesByUser(user.id);\n      \n      // Get token details for holdings\n      const holdingsWithTokens = await Promise.all(\n        holdings.map(async (holding) => {\n          const token = await storage.getToken(holding.tokenId);\n          return { ...holding, token };\n        })\n      );\n      \n      res.json({\n        holdings: holdingsWithTokens,\n        trades,\n        totalValue: holdings.reduce((sum, h) => {\n          const balance = parseFloat(h.balance);\n          // In real implementation, multiply by current token price\n          return sum + balance * 0.001; // Mock price\n        }, 0).toString(),\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch portfolio\", error });\n    }\n  });\n\n  // Platform stats\n  app.get(\"/api/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getPlatformStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\", error });\n    }\n  });\n\n  // Bonding curve calculations\n  app.post(\"/api/bonding-curve/calculate\", async (req, res) => {\n    try {\n      const { tokenId, okbAmount, isBuy } = req.body;\n      \n      if (!tokenId || !okbAmount) {\n        return res.status(400).json({ message: \"tokenId and okbAmount required\" });\n      }\n      \n      const token = await storage.getToken(tokenId);\n      if (!token) {\n        return res.status(404).json({ message: \"Token not found\" });\n      }\n      \n      // Simplified bonding curve calculation\n      // In real implementation, use actual bonding curve math\n      const virtualOkb = parseFloat(token.virtualOkb);\n      const virtualTokens = parseFloat(token.virtualTokens);\n      const inputAmount = parseFloat(okbAmount);\n      \n      let outputAmount;\n      let newPrice;\n      \n      if (isBuy) {\n        // Buy: k = virtualOkb * virtualTokens\n        const k = virtualOkb * virtualTokens;\n        const newVirtualOkb = virtualOkb + inputAmount;\n        const newVirtualTokens = k / newVirtualOkb;\n        outputAmount = virtualTokens - newVirtualTokens;\n        newPrice = newVirtualOkb / newVirtualTokens;\n      } else {\n        // Sell calculation\n        const k = virtualOkb * virtualTokens;\n        const newVirtualTokens = virtualTokens + inputAmount;\n        const newVirtualOkb = k / newVirtualTokens;\n        outputAmount = virtualOkb - newVirtualOkb;\n        newPrice = newVirtualOkb / newVirtualTokens;\n      }\n      \n      const priceImpact = Math.abs((newPrice - (virtualOkb / virtualTokens)) / (virtualOkb / virtualTokens)) * 100;\n      \n      res.json({\n        outputAmount: outputAmount.toString(),\n        newPrice: newPrice.toString(),\n        priceImpact: priceImpact.toString(),\n        minimumReceived: (outputAmount * 0.98).toString(), // 2% slippage\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate bonding curve\", error });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8771},"server/storage.ts":{"content":"import { type User, type InsertUser, type Token, type InsertToken, type Trade, type InsertTrade, type Holding, type PlatformStats } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByWallet(walletAddress: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Token methods\n  getToken(id: string): Promise<Token | undefined>;\n  getTokenByAddress(address: string): Promise<Token | undefined>;\n  getTokensByCreator(creatorId: string): Promise<Token[]>;\n  getAllTokens(filter?: { isGraduated?: boolean }): Promise<Token[]>;\n  createToken(token: InsertToken & { creatorId: string; address: string }): Promise<Token>;\n  updateToken(id: string, updates: Partial<Token>): Promise<Token | undefined>;\n\n  // Trade methods\n  getTrade(id: string): Promise<Trade | undefined>;\n  getTradesByToken(tokenId: string): Promise<Trade[]>;\n  getTradesByUser(userId: string): Promise<Trade[]>;\n  createTrade(trade: InsertTrade & { userId: string }): Promise<Trade>;\n\n  // Holdings methods\n  getHolding(userId: string, tokenId: string): Promise<Holding | undefined>;\n  getHoldingsByUser(userId: string): Promise<Holding[]>;\n  updateHolding(userId: string, tokenId: string, updates: Partial<Holding>): Promise<Holding>;\n\n  // Platform stats\n  getPlatformStats(): Promise<PlatformStats | undefined>;\n  updatePlatformStats(stats: Partial<PlatformStats>): Promise<PlatformStats>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private tokens: Map<string, Token> = new Map();\n  private trades: Map<string, Trade> = new Map();\n  private holdings: Map<string, Holding> = new Map();\n  private platformStats: PlatformStats | undefined;\n\n  constructor() {\n    // Initialize with mock platform stats\n    this.platformStats = {\n      id: randomUUID(),\n      totalTokens: 0,\n      totalVolume: '0',\n      totalUsers: 0,\n      graduatedTokens: 0,\n      dailyStats: {},\n      updatedAt: new Date(),\n    };\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByWallet(walletAddress: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => \n      user.walletAddress.toLowerCase() === walletAddress.toLowerCase()\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    \n    // Update platform stats\n    if (this.platformStats) {\n      this.platformStats.totalUsers += 1;\n      this.platformStats.updatedAt = new Date();\n    }\n    \n    return user;\n  }\n\n  // Token methods\n  async getToken(id: string): Promise<Token | undefined> {\n    return this.tokens.get(id);\n  }\n\n  async getTokenByAddress(address: string): Promise<Token | undefined> {\n    return Array.from(this.tokens.values()).find(token => \n      token.address.toLowerCase() === address.toLowerCase()\n    );\n  }\n\n  async getTokensByCreator(creatorId: string): Promise<Token[]> {\n    return Array.from(this.tokens.values()).filter(token => token.creatorId === creatorId);\n  }\n\n  async getAllTokens(filter?: { isGraduated?: boolean }): Promise<Token[]> {\n    let allTokens = Array.from(this.tokens.values());\n    \n    if (filter?.isGraduated !== undefined) {\n      allTokens = allTokens.filter(token => token.isGraduated === filter.isGraduated);\n    }\n    \n    return allTokens.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async createToken(tokenData: InsertToken & { creatorId: string; address: string }): Promise<Token> {\n    const id = randomUUID();\n    const token: Token = {\n      ...tokenData,\n      description: tokenData.description || null,\n      imageUrl: tokenData.imageUrl || null,\n      id,\n      totalSupply: '1000000000000000000000000000', // 1B tokens with 18 decimals\n      virtualOkb: '30000000000000000000', // 30 OKB\n      virtualTokens: '1073000000000000000000000000', // 1.073B tokens\n      isGraduated: false,\n      graduatedAt: null,\n      currentPrice: '0',\n      marketCap: '0',\n      volume24h: '0',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.tokens.set(id, token);\n    \n    // Update platform stats\n    if (this.platformStats) {\n      this.platformStats.totalTokens += 1;\n      this.platformStats.updatedAt = new Date();\n    }\n    \n    return token;\n  }\n\n  async updateToken(id: string, updates: Partial<Token>): Promise<Token | undefined> {\n    const token = this.tokens.get(id);\n    if (!token) return undefined;\n    \n    const updatedToken = { ...token, ...updates, updatedAt: new Date() };\n    this.tokens.set(id, updatedToken);\n    return updatedToken;\n  }\n\n  // Trade methods\n  async getTrade(id: string): Promise<Trade | undefined> {\n    return this.trades.get(id);\n  }\n\n  async getTradesByToken(tokenId: string): Promise<Trade[]> {\n    return Array.from(this.trades.values())\n      .filter(trade => trade.tokenId === tokenId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getTradesByUser(userId: string): Promise<Trade[]> {\n    return Array.from(this.trades.values())\n      .filter(trade => trade.userId === userId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async createTrade(tradeData: InsertTrade & { userId: string }): Promise<Trade> {\n    const id = randomUUID();\n    const trade: Trade = {\n      ...tradeData,\n      id,\n      createdAt: new Date(),\n    };\n    \n    this.trades.set(id, trade);\n    \n    // Update platform stats\n    if (this.platformStats) {\n      const currentVolume = parseFloat(this.platformStats.totalVolume || '0');\n      const tradeVolume = parseFloat(tradeData.okbAmount);\n      this.platformStats.totalVolume = (currentVolume + tradeVolume).toString();\n      this.platformStats.updatedAt = new Date();\n    }\n    \n    return trade;\n  }\n\n  // Holdings methods\n  async getHolding(userId: string, tokenId: string): Promise<Holding | undefined> {\n    const key = `${userId}-${tokenId}`;\n    return this.holdings.get(key);\n  }\n\n  async getHoldingsByUser(userId: string): Promise<Holding[]> {\n    return Array.from(this.holdings.values()).filter(holding => holding.userId === userId);\n  }\n\n  async updateHolding(userId: string, tokenId: string, updates: Partial<Holding>): Promise<Holding> {\n    const key = `${userId}-${tokenId}`;\n    const existing = this.holdings.get(key);\n    \n    const holding: Holding = {\n      id: existing?.id || randomUUID(),\n      userId,\n      tokenId,\n      balance: '0',\n      avgBuyPrice: null,\n      totalInvested: '0',\n      updatedAt: new Date(),\n      ...existing,\n      ...updates,\n    };\n    \n    this.holdings.set(key, holding);\n    return holding;\n  }\n\n  // Platform stats\n  async getPlatformStats(): Promise<PlatformStats | undefined> {\n    return this.platformStats;\n  }\n\n  async updatePlatformStats(stats: Partial<PlatformStats>): Promise<PlatformStats> {\n    this.platformStats = {\n      ...this.platformStats!,\n      ...stats,\n      updatedAt: new Date(),\n    };\n    return this.platformStats;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7346},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const tokens = pgTable(\"tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  address: text(\"address\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  symbol: text(\"symbol\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n  creatorId: varchar(\"creator_id\").references(() => users.id).notNull(),\n  totalSupply: decimal(\"total_supply\", { precision: 78, scale: 0 }).notNull(),\n  virtualOkb: decimal(\"virtual_okb\", { precision: 78, scale: 18 }).notNull(),\n  virtualTokens: decimal(\"virtual_tokens\", { precision: 78, scale: 18 }).notNull(),\n  isGraduated: boolean(\"is_graduated\").default(false),\n  graduatedAt: timestamp(\"graduated_at\"),\n  currentPrice: decimal(\"current_price\", { precision: 78, scale: 18 }),\n  marketCap: decimal(\"market_cap\", { precision: 78, scale: 18 }),\n  volume24h: decimal(\"volume_24h\", { precision: 78, scale: 18 }).default('0'),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const trades = pgTable(\"trades\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tokenId: varchar(\"token_id\").references(() => tokens.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: text(\"type\", { enum: [\"buy\", \"sell\"] }).notNull(),\n  okbAmount: decimal(\"okb_amount\", { precision: 78, scale: 18 }).notNull(),\n  tokenAmount: decimal(\"token_amount\", { precision: 78, scale: 18 }).notNull(),\n  price: decimal(\"price\", { precision: 78, scale: 18 }).notNull(),\n  txHash: text(\"tx_hash\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const holdings = pgTable(\"holdings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  tokenId: varchar(\"token_id\").references(() => tokens.id).notNull(),\n  balance: decimal(\"balance\", { precision: 78, scale: 18 }).notNull(),\n  avgBuyPrice: decimal(\"avg_buy_price\", { precision: 78, scale: 18 }),\n  totalInvested: decimal(\"total_invested\", { precision: 78, scale: 18 }).default('0'),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const platformStats = pgTable(\"platform_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  totalTokens: integer(\"total_tokens\").default(0),\n  totalVolume: decimal(\"total_volume\", { precision: 78, scale: 18 }).default('0'),\n  totalUsers: integer(\"total_users\").default(0),\n  graduatedTokens: integer(\"graduated_tokens\").default(0),\n  dailyStats: jsonb(\"daily_stats\"),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  walletAddress: true,\n});\n\nexport const insertTokenSchema = createInsertSchema(tokens).pick({\n  name: true,\n  symbol: true,\n  description: true,\n  imageUrl: true,\n}).extend({\n  name: z.string().min(1, \"Token name is required\").max(50, \"Token name too long\"),\n  symbol: z.string().min(1, \"Symbol is required\").max(10, \"Symbol too long\").regex(/^[A-Z0-9]+$/, \"Symbol must be uppercase alphanumeric\"),\n  description: z.string().max(500, \"Description too long\").optional(),\n  imageUrl: z.string().url(\"Invalid image URL\").optional(),\n});\n\nexport const insertTradeSchema = createInsertSchema(trades).pick({\n  tokenId: true,\n  type: true,\n  okbAmount: true,\n  tokenAmount: true,\n  price: true,\n  txHash: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Token = typeof tokens.$inferSelect;\nexport type InsertToken = z.infer<typeof insertTokenSchema>;\nexport type Trade = typeof trades.$inferSelect;\nexport type InsertTrade = z.infer<typeof insertTradeSchema>;\nexport type Holding = typeof holdings.$inferSelect;\nexport type PlatformStats = typeof platformStats.$inferSelect;\n","size_bytes":4418},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { WagmiProvider } from \"wagmi\";\nimport { RainbowKitProvider } from \"@rainbow-me/rainbowkit\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { wagmiConfig } from \"./config/wagmi\";\nimport Landing from \"@/pages/Landing\";\nimport NotFound from \"@/pages/not-found\";\n\nimport \"@rainbow-me/rainbowkit/styles.css\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <WagmiProvider config={wagmiConfig}>\n      <QueryClientProvider client={queryClient}>\n        <RainbowKitProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </RainbowKitProvider>\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1040},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 10%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(0 0% 12%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(0 0% 12%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(0 0% 98%);\n  --primary-foreground: hsl(0 0% 9%);\n  --secondary: hsl(0 0% 20%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(0 0% 20%);\n  --muted-foreground: hsl(0 0% 65%);\n  --accent: hsl(0 0% 20%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 72% 51%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(0 0% 20%);\n  --input: hsl(0 0% 20%);\n  --ring: hsl(0 0% 83%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --sidebar: hsl(0 0% 12%);\n  --sidebar-foreground: hsl(0 0% 98%);\n  --sidebar-primary: hsl(0 0% 98%);\n  --sidebar-primary-foreground: hsl(0 0% 9%);\n  --sidebar-accent: hsl(0 0% 20%);\n  --sidebar-accent-foreground: hsl(0 0% 98%);\n  --sidebar-border: hsl(0 0% 20%);\n  --sidebar-ring: hsl(0 0% 83%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: \"Inter\", var(--font-sans);\n  }\n}\n\n@layer components {\n  .glass-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);\n  }\n\n  .glass-card-dark {\n    background: rgba(0, 0, 0, 0.25);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.5);\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, #ffffff 0%, #a0a0a0 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .hero-gradient {\n    background: linear-gradient(135deg, #000000 0%, #1a1a1a 50%, #2d2d2d 100%);\n  }\n\n  .token-card:hover {\n    transform: translateY(-4px);\n    transition: all 0.3s ease;\n  }\n\n  .modal-backdrop {\n    background: rgba(0, 0, 0, 0.8);\n    backdrop-filter: blur(4px);\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { \n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to { \n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes pulse-ring {\n  0% {\n    transform: scale(0.33);\n  }\n  80%, 100% {\n    opacity: 0;\n  }\n}\n\n.pulse-ring {\n  animation: pulse-ring 1.25s cubic-bezier(0.215, 0.61, 0.355, 1) infinite;\n}\n","size_bytes":2967},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Analytics.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { TrendingUp, Users, Coins, Clock } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function Analytics() {\n  const { data: stats } = useQuery<any>({\n    queryKey: ['/api/stats'],\n    refetchInterval: 30000,\n  });\n\n  const { data: tokens = [] } = useQuery<any[]>({\n    queryKey: ['/api/tokens'],\n  });\n\n  // Calculate mock analytics\n  const mockAnalytics = {\n    totalVolume: parseFloat(stats?.totalVolume || '0').toFixed(1),\n    activeTokens: stats?.totalTokens || 0,\n    totalUsers: stats?.totalUsers || 0,\n    avgGradTime: '3.2',\n    volumeChange: '+23.5%',\n    activeTokensChange: `+${Math.floor(Math.random() * 20)} today`,\n    usersChange: `+${Math.floor(Math.random() * 200)} today`,\n    gradTimeChange: '-0.3 days',\n  };\n\n  // Top performing tokens (mock data for graduated tokens)\n  const topTokens = tokens\n    .filter((token: any) => token.isGraduated)\n    .slice(0, 5)\n    .map((token: any, index: number) => ({\n      ...token,\n      rank: index + 1,\n      change24h: Math.random() * 100 - 20, // Random change between -20% and +80%\n      volume24h: Math.random() * 200000,\n      marketCap: Math.random() * 2000000,\n    }));\n\n  return (\n    <section className=\"py-16 lg:py-24 bg-gradient-to-b from-background to-black/80\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold mb-4\">Platform Analytics</h2>\n          <p className=\"text-muted-foreground text-lg\">Real-time insights into the Xcelerate ecosystem</p>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6 mb-16\">\n          <Card className=\"glass-card border-border text-center\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-3xl font-bold\">₪{mockAnalytics.totalVolume}M</CardTitle>\n              <CardDescription>24h Volume</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-green-400\">{mockAnalytics.volumeChange}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-border text-center\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-3xl font-bold\">{mockAnalytics.activeTokens.toLocaleString()}</CardTitle>\n              <CardDescription>Active Tokens</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-green-400\">{mockAnalytics.activeTokensChange}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-border text-center\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-3xl font-bold\">{mockAnalytics.totalUsers.toLocaleString()}</CardTitle>\n              <CardDescription>Total Users</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-green-400\">{mockAnalytics.usersChange}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-border text-center\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-3xl font-bold\">{mockAnalytics.avgGradTime}</CardTitle>\n              <CardDescription>Avg. Days to Graduate</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-yellow-400\">{mockAnalytics.gradTimeChange}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Volume Chart */}\n          <Card className=\"glass-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Trading Volume</CardTitle>\n                <Select defaultValue=\"7d\">\n                  <SelectTrigger className=\"w-20 glass-card bg-transparent border-border\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"7d\">7D</SelectItem>\n                    <SelectItem value=\"30d\">30D</SelectItem>\n                    <SelectItem value=\"90d\">90D</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center bg-muted/20 rounded-xl\">\n                <div className=\"text-center text-muted-foreground\">\n                  <TrendingUp className=\"h-12 w-12 mx-auto mb-4\" />\n                  <p className=\"font-medium\">Volume Chart</p>\n                  <p className=\"text-sm\">Recharts implementation needed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Token Creation Chart */}\n          <Card className=\"glass-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Token Creations</CardTitle>\n                <Select defaultValue=\"7d\">\n                  <SelectTrigger className=\"w-20 glass-card bg-transparent border-border\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"7d\">7D</SelectItem>\n                    <SelectItem value=\"30d\">30D</SelectItem>\n                    <SelectItem value=\"90d\">90D</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center bg-muted/20 rounded-xl\">\n                <div className=\"text-center text-muted-foreground\">\n                  <Coins className=\"h-12 w-12 mx-auto mb-4\" />\n                  <p className=\"font-medium\">Token Creation Chart</p>\n                  <p className=\"text-sm\">Recharts implementation needed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Top Tokens */}\n        <Card className=\"glass-card border-border\">\n          <CardHeader>\n            <CardTitle>Top Performing Tokens</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {topTokens.length === 0 ? (\n              <div className=\"text-center py-16\">\n                <TrendingUp className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No Graduated Tokens Yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Tokens will appear here once they graduate to DEX\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-border\">\n                    <TableHead>Rank</TableHead>\n                    <TableHead>Token</TableHead>\n                    <TableHead>Price</TableHead>\n                    <TableHead>24h Change</TableHead>\n                    <TableHead>Volume</TableHead>\n                    <TableHead>Market Cap</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {topTokens.map((token: any) => {\n                    const isPositive = token.change24h >= 0;\n                    \n                    return (\n                      <TableRow \n                        key={token.id} \n                        className=\"border-border hover:bg-white/5\"\n                        data-testid={`top-token-${token.symbol}`}\n                      >\n                        <TableCell className=\"font-medium\">{token.rank}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white text-xs font-bold\">\n                              {token.symbol.charAt(0)}\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{token.name}</div>\n                              <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400 text-xs\">\n                                Graduated\n                              </Badge>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          ₪{(Math.random() * 0.1).toFixed(6)}\n                        </TableCell>\n                        <TableCell>\n                          <span className={`font-medium ${isPositive ? 'text-green-400' : 'text-red-400'}`}>\n                            {isPositive ? '+' : ''}{token.change24h.toFixed(1)}%\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {(token.volume24h / 1000).toFixed(1)}k OKB\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {(token.marketCap / 1000000).toFixed(1)}M OKB\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9975},"client/src/components/CreateTokenModal.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAccount, useWriteContract, useWaitForTransactionReceipt } from 'wagmi';\nimport { parseEther } from 'viem';\nimport { X, Upload, Info } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { toast } from '@/hooks/use-toast';\nimport { insertTokenSchema } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\nimport { CONTRACTS, TOKEN_FACTORY_ABI, CONSTANTS } from '@/config/contracts';\nimport type { InsertToken } from '@shared/schema';\n\ninterface CreateTokenModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CreateTokenModal({ isOpen, onClose }: CreateTokenModalProps) {\n  const { address, isConnected } = useAccount();\n  const queryClient = useQueryClient();\n  const { writeContract, data: txHash, isPending: isWriting } = useWriteContract();\n  const [isUploading, setIsUploading] = useState(false);\n\n  // Wait for transaction confirmation\n  const { isLoading: isConfirming, isSuccess } = useWaitForTransactionReceipt({\n    hash: txHash,\n  });\n\n  const form = useForm<InsertToken>({\n    resolver: zodResolver(insertTokenSchema),\n    defaultValues: {\n      name: '',\n      symbol: '',\n      description: '',\n      imageUrl: '',\n    },\n  });\n\n  // Create token mutation\n  const createTokenMutation = useMutation({\n    mutationFn: async (data: InsertToken) => {\n      if (!isConnected || !address) {\n        throw new Error('Please connect your wallet first');\n      }\n\n      // Create token contract first\n      writeContract({\n        address: CONTRACTS.TOKEN_FACTORY,\n        abi: TOKEN_FACTORY_ABI,\n        functionName: 'createToken',\n        args: [data.name, data.symbol, data.description || '', data.imageUrl || ''],\n        value: parseEther(CONSTANTS.CREATION_FEE),\n      });\n\n      return data;\n    },\n    onError: (error) => {\n      toast({\n        title: 'Token Creation Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Record token in database after successful deployment\n  const recordTokenMutation = useMutation({\n    mutationFn: async ({ tokenData, contractAddress }: { tokenData: InsertToken; contractAddress: string }) => {\n      const response = await apiRequest('POST', '/api/tokens', {\n        ...tokenData,\n        creatorWallet: address,\n        contractAddress,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tokens'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      toast({\n        title: 'Token Created Successfully!',\n        description: 'Your token has been deployed and is now live on the bonding curve.',\n      });\n      onClose();\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: 'Failed to record token',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertToken) => {\n    createTokenMutation.mutate(data);\n  };\n\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: 'File too large',\n        description: 'Please choose an image under 10MB',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      // In a real app, upload to IPFS or cloud storage\n      // For now, create a mock URL\n      const mockUrl = `https://example.com/token-images/${Date.now()}-${file.name}`;\n      form.setValue('imageUrl', mockUrl);\n      \n      toast({\n        title: 'Image uploaded',\n        description: 'Your token image has been uploaded successfully.',\n      });\n    } catch (error) {\n      toast({\n        title: 'Upload failed',\n        description: 'Failed to upload image. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const isLoading = createTokenMutation.isPending || isWriting || isConfirming || isUploading;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"glass-card-dark max-w-md border-border\" data-testid=\"modal-create-token\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold\">Create Token</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Token Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"e.g., Super Doge\"\n                      className=\"glass-card bg-transparent border-border\"\n                      data-testid=\"input-token-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"symbol\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Token Symbol</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"e.g., SDOGE\"\n                      className=\"glass-card bg-transparent border-border uppercase\"\n                      onChange={(e) => field.onChange(e.target.value.toUpperCase())}\n                      maxLength={10}\n                      data-testid=\"input-token-symbol\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Tell everyone about your token...\"\n                      rows={3}\n                      className=\"glass-card bg-transparent border-border resize-none\"\n                      maxLength={500}\n                      data-testid=\"input-token-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"imageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Token Image</FormLabel>\n                  <FormControl>\n                    <div className=\"space-y-4\">\n                      <label\n                        htmlFor=\"image-upload\"\n                        className=\"glass-card border-2 border-dashed border-border rounded-xl p-8 text-center cursor-pointer hover:border-white/50 transition-colors block\"\n                        data-testid=\"upload-token-image\"\n                      >\n                        <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">\n                          {isUploading ? 'Uploading...' : 'Click to upload or drag and drop'}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground mt-2\">PNG, JPG up to 10MB</p>\n                      </label>\n                      <input\n                        id=\"image-upload\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageUpload}\n                        className=\"hidden\"\n                        disabled={isUploading}\n                      />\n                      {field.value && (\n                        <div className=\"text-sm text-green-400 text-center\">\n                          Image uploaded successfully\n                        </div>\n                      )}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Fee Information */}\n            <div className=\"glass-card p-4 rounded-xl bg-yellow-500/10 border border-yellow-500/20\">\n              <div className=\"flex items-center space-x-2\">\n                <Info className=\"h-4 w-4 text-yellow-400\" />\n                <span className=\"text-sm font-medium\">Creation Fee: 0.001 OKB</span>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4\">\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={onClose}\n                className=\"flex-1 glass-card hover:bg-white/10\"\n                disabled={isLoading}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1 bg-white text-black hover:bg-gray-100\"\n                disabled={isLoading || !isConnected}\n                data-testid=\"button-create-token\"\n              >\n                {isLoading ? 'Creating...' : 'Create Token'}\n              </Button>\n            </div>\n\n            {!isConnected && (\n              <p className=\"text-sm text-yellow-400 text-center\">\n                Please connect your wallet to create a token\n              </p>\n            )}\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10225},"client/src/components/Header.tsx":{"content":"import { useState } from 'react';\nimport { ConnectButton } from '@rainbow-me/rainbowkit';\nimport { Rocket, Menu, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\n\ninterface HeaderProps {\n  onCreateClick: () => void;\n  onDiscoverClick: () => void;\n}\n\nexport default function Header({ onCreateClick, onDiscoverClick }: HeaderProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { label: 'Discover', onClick: onDiscoverClick },\n    { label: 'Create', onClick: onCreateClick },\n    { label: 'Portfolio', onClick: () => {} },\n    { label: 'Analytics', onClick: () => {} },\n  ];\n\n  return (\n    <header className=\"glass-card-dark sticky top-0 z-50 border-b border-border\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16 lg:h-20\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-white to-gray-300 flex items-center justify-center\">\n              <Rocket className=\"text-black text-lg\" />\n            </div>\n            <span className=\"text-xl lg:text-2xl font-bold gradient-text\">Xcelerate</span>\n          </div>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <button\n                key={item.label}\n                onClick={item.onClick}\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid={`nav-${item.label.toLowerCase()}`}\n              >\n                {item.label}\n              </button>\n            ))}\n          </nav>\n\n          {/* Right side */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Network indicator */}\n            <div className=\"hidden sm:flex items-center space-x-2 glass-card px-3 py-2 rounded-lg\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-muted-foreground\">X Layer</span>\n            </div>\n\n            {/* Wallet connection */}\n            <ConnectButton.Custom>\n              {({\n                account,\n                chain,\n                openAccountModal,\n                openChainModal,\n                openConnectModal,\n                mounted,\n              }) => {\n                const ready = mounted;\n                const connected = ready && account && chain;\n\n                return (\n                  <div\n                    {...(!ready && {\n                      'aria-hidden': true,\n                      style: {\n                        opacity: 0,\n                        pointerEvents: 'none',\n                        userSelect: 'none',\n                      },\n                    })}\n                  >\n                    {(() => {\n                      if (!connected) {\n                        return (\n                          <Button\n                            onClick={openConnectModal}\n                            className=\"glass-card hover:bg-white/10 transition-all duration-300\"\n                            data-testid=\"button-connect-wallet\"\n                          >\n                            <span className=\"hidden sm:inline\">Connect Wallet</span>\n                            <span className=\"sm:hidden\">Connect</span>\n                          </Button>\n                        );\n                      }\n\n                      if (chain.unsupported) {\n                        return (\n                          <Button\n                            onClick={openChainModal}\n                            className=\"glass-card hover:bg-white/10 transition-all duration-300\"\n                            variant=\"destructive\"\n                            data-testid=\"button-wrong-network\"\n                          >\n                            Wrong network\n                          </Button>\n                        );\n                      }\n\n                      return (\n                        <Button\n                          onClick={openAccountModal}\n                          className=\"glass-card hover:bg-white/10 transition-all duration-300\"\n                          data-testid=\"button-account\"\n                        >\n                          {account.displayName}\n                          {account.displayBalance\n                            ? ` (${account.displayBalance})`\n                            : ''}\n                        </Button>\n                      );\n                    })()}\n                  </div>\n                );\n              }}\n            </ConnectButton.Custom>\n\n            {/* Mobile menu trigger */}\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"lg:hidden\"\n                  data-testid=\"button-mobile-menu\"\n                >\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"glass-card-dark border-border\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  {navItems.map((item) => (\n                    <button\n                      key={item.label}\n                      onClick={() => {\n                        item.onClick();\n                        setIsMobileMenuOpen(false);\n                      }}\n                      className=\"text-left text-lg text-muted-foreground hover:text-foreground transition-colors py-2\"\n                      data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n                    >\n                      {item.label}\n                    </button>\n                  ))}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6123},"client/src/components/Hero.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Plus, Search } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { motion } from 'framer-motion';\n\ninterface HeroProps {\n  onCreateClick: () => void;\n  onDiscoverClick: () => void;\n}\n\nexport default function Hero({ onCreateClick, onDiscoverClick }: HeroProps) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Fetch platform stats\n  const { data: stats } = useQuery<any>({\n    queryKey: ['/api/stats'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n        duration: 0.6,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.6, ease: \"easeOut\" },\n    },\n  };\n\n  return (\n    <section className=\"hero-gradient relative overflow-hidden\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-16 lg:py-24\">\n        <motion.div\n          className=\"text-center max-w-4xl mx-auto\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate={isVisible ? \"visible\" : \"hidden\"}\n        >\n          <motion.h1 \n            className=\"text-4xl sm:text-6xl lg:text-7xl font-bold mb-6\"\n            variants={itemVariants}\n          >\n            <span className=\"gradient-text\">Launch Your</span><br />\n            <span className=\"text-white\">Meme Token</span>\n          </motion.h1>\n          \n          <motion.p \n            className=\"text-xl lg:text-2xl text-muted-foreground mb-8\"\n            variants={itemVariants}\n          >\n            The modern bonding curve launchpad on X Layer. Create, trade, and graduate your tokens to DEX automatically.\n          </motion.p>\n          \n          {/* Stats Cards */}\n          <motion.div \n            className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 lg:gap-6 mb-12\"\n            variants={itemVariants}\n          >\n            <div className=\"glass-card p-6 rounded-2xl\" data-testid=\"stat-total-tokens\">\n              <div className=\"text-3xl font-bold text-white\">\n                {stats?.totalTokens?.toLocaleString() || '0'}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Tokens Created</div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl\" data-testid=\"stat-total-volume\">\n              <div className=\"text-3xl font-bold text-white\">\n                ₪{parseFloat(stats?.totalVolume || '0').toFixed(1)}M\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Volume</div>\n            </div>\n            <div className=\"glass-card p-6 rounded-2xl\" data-testid=\"stat-graduated-tokens\">\n              <div className=\"text-3xl font-bold text-white\">\n                {stats?.graduatedTokens || '0'}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Graduated to DEX</div>\n            </div>\n          </motion.div>\n\n          {/* CTA Buttons */}\n          <motion.div \n            className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\n            variants={itemVariants}\n          >\n            <Button\n              onClick={onCreateClick}\n              className=\"bg-white text-black px-8 py-4 rounded-2xl font-semibold text-lg hover:bg-gray-100 transition-all duration-300 transform hover:scale-105 w-full sm:w-auto\"\n              data-testid=\"button-create-token\"\n            >\n              <Plus className=\"mr-2 h-5 w-5\" />\n              Create Token\n            </Button>\n            <Button\n              onClick={onDiscoverClick}\n              variant=\"ghost\"\n              className=\"glass-card hover:bg-white/10 px-8 py-4 rounded-2xl font-semibold text-lg transition-all duration-300 w-full sm:w-auto\"\n              data-testid=\"button-discover-tokens\"\n            >\n              <Search className=\"mr-2 h-5 w-5\" />\n              Discover Tokens\n            </Button>\n          </motion.div>\n        </motion.div>\n      </div>\n      \n      {/* Background decoration */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-white/5 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-white/5 rounded-full blur-3xl\"></div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4583},"client/src/components/Portfolio.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useAccount } from 'wagmi';\nimport { Download, TrendingUp, Activity } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nexport default function Portfolio() {\n  const { address, isConnected } = useAccount();\n\n  const { data: portfolio, isLoading } = useQuery<any>({\n    queryKey: ['/api/portfolio', address],\n    enabled: isConnected && !!address,\n  });\n\n  const formatCurrency = (amount: string, symbol = 'OKB') => {\n    const num = parseFloat(amount);\n    if (num >= 1000000) return `${(num / 1000000).toFixed(2)}M ${symbol}`;\n    if (num >= 1000) return `${(num / 1000).toFixed(2)}k ${symbol}`;\n    return `${num.toFixed(4)} ${symbol}`;\n  };\n\n  const formatPercentage = (value: number) => {\n    const sign = value >= 0 ? '+' : '';\n    return `${sign}${value.toFixed(2)}%`;\n  };\n\n  if (!isConnected) {\n    return (\n      <section className=\"py-16 lg:py-24 bg-gradient-to-b from-black/50 to-background\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <Activity className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Connect Your Wallet</h2>\n            <p className=\"text-muted-foreground\">\n              Connect your wallet to view your portfolio and token holdings\n            </p>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 lg:py-24 bg-gradient-to-b from-black/50 to-background\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-muted rounded w-64\"></div>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"glass-card p-6 rounded-2xl\">\n                  <div className=\"space-y-3\">\n                    <div className=\"h-4 bg-muted rounded w-20\"></div>\n                    <div className=\"h-8 bg-muted rounded w-24\"></div>\n                    <div className=\"h-3 bg-muted rounded w-16\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const mockStats = {\n    totalValue: portfolio?.totalValue || '0',\n    totalPnL: '5.23',\n    totalPnLPercent: 12.42,\n    totalHoldings: portfolio?.holdings?.length || 0,\n    bestPerformer: 340,\n    bestToken: 'MOON',\n  };\n\n  return (\n    <section className=\"py-16 lg:py-24 bg-gradient-to-b from-black/50 to-background\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between mb-12\">\n          <div>\n            <h2 className=\"text-3xl lg:text-4xl font-bold mb-4\">Your Portfolio</h2>\n            <p className=\"text-muted-foreground text-lg\">Track your token holdings and performance</p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            className=\"glass-card hover:bg-white/10\"\n            data-testid=\"button-export-portfolio\"\n          >\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export\n          </Button>\n        </div>\n\n        {/* Portfolio Stats */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n          <Card className=\"glass-card border-border\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Total Value</CardDescription>\n              <CardTitle className=\"text-2xl\">{formatCurrency(mockStats.totalValue)}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-green-400 flex items-center\">\n                <TrendingUp className=\"h-3 w-3 mr-1\" />\n                {formatPercentage(mockStats.totalPnLPercent)}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-border\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Total P&L</CardDescription>\n              <CardTitle className=\"text-2xl text-green-400\">\n                +{formatCurrency(mockStats.totalPnL)}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-muted-foreground\">\n                {formatPercentage(mockStats.totalPnLPercent)}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-border\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Holdings</CardDescription>\n              <CardTitle className=\"text-2xl\">{mockStats.totalHoldings}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-muted-foreground\">Active tokens</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card border-border\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription>Best Performer</CardDescription>\n              <CardTitle className=\"text-2xl text-green-400\">\n                {formatPercentage(mockStats.bestPerformer)}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-sm text-muted-foreground\">{mockStats.bestToken}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Holdings Table */}\n        <Card className=\"glass-card border-border\">\n          <CardHeader>\n            <CardTitle>Token Holdings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {!portfolio?.holdings || portfolio.holdings.length === 0 ? (\n              <div className=\"text-center py-16\">\n                <Activity className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No Holdings Yet</h3>\n                <p className=\"text-muted-foreground\">\n                  Start trading tokens to see your portfolio here\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-border\">\n                    <TableHead>Token</TableHead>\n                    <TableHead>Balance</TableHead>\n                    <TableHead>Value</TableHead>\n                    <TableHead>P&L</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {portfolio.holdings.map((holding: any) => {\n                    const mockPnL = Math.random() * 50 - 10; // Mock P&L calculation\n                    const isPositive = mockPnL >= 0;\n                    \n                    return (\n                      <TableRow \n                        key={holding.id} \n                        className=\"border-border hover:bg-white/5\"\n                        data-testid={`holding-row-${holding.token?.symbol}`}\n                      >\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white text-sm font-bold\">\n                              {holding.token?.symbol?.charAt(0) || '?'}\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{holding.token?.name || 'Unknown'}</div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                {holding.token?.symbol || 'N/A'}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {formatCurrency(holding.balance, '').replace(' ', '')}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">tokens</div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {formatCurrency((parseFloat(holding.balance) * 0.001).toString())}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">$892.34</div>\n                        </TableCell>\n                        <TableCell>\n                          <div className={`font-medium ${isPositive ? 'text-green-400' : 'text-red-400'}`}>\n                            {formatPercentage(mockPnL)}\n                          </div>\n                          <div className={`text-sm ${isPositive ? 'text-green-400' : 'text-red-400'}`}>\n                            {isPositive ? '+' : ''}\n                            {formatCurrency((mockPnL * 0.1).toString())}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            className=\"glass-card hover:bg-white/10\"\n                            data-testid={`button-trade-${holding.token?.symbol}`}\n                          >\n                            Trade\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9996},"client/src/components/TokenGrid.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Search, GraduationCap } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { motion } from 'framer-motion';\nimport type { Token } from '@shared/schema';\n\ninterface TokenGridProps {\n  onTokenSelect: (token: Token) => void;\n}\n\nexport default function TokenGrid({ onTokenSelect }: TokenGridProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState('newest');\n  const [filterBy, setFilterBy] = useState('all');\n\n  const { data: tokens = [], isLoading } = useQuery<Token[]>({\n    queryKey: ['/api/tokens'],\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  // Filter and sort tokens\n  const filteredTokens = tokens\n    .filter((token: Token) => {\n      const matchesSearch = \n        token.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        token.symbol.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesFilter = \n        filterBy === 'all' ||\n        (filterBy === 'active' && !token.isGraduated) ||\n        (filterBy === 'graduated' && token.isGraduated);\n      \n      return matchesSearch && matchesFilter;\n    })\n    .sort((a: Token, b: Token) => {\n      switch (sortBy) {\n        case 'volume':\n          return parseFloat(b.volume24h || '0') - parseFloat(a.volume24h || '0');\n        case 'progress':\n          const progressA = (token: Token) => {\n            const virtualOkb = parseFloat(token.virtualOkb);\n            const graduationThreshold = 80;\n            return (virtualOkb / graduationThreshold) * 100;\n          };\n          return progressA(b) - progressA(a);\n        case 'newest':\n        default:\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      }\n    });\n\n  const calculateProgress = (token: Token) => {\n    const virtualOkb = parseFloat(token.virtualOkb);\n    const graduationThreshold = 80; // 80 OKB\n    return Math.min((virtualOkb / graduationThreshold) * 100, 100);\n  };\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price || '0');\n    if (num === 0) return '₪0.00';\n    if (num < 0.01) return `₪${num.toFixed(6)}`;\n    return `₪${num.toFixed(4)}`;\n  };\n\n  const formatMarketCap = (marketCap: string) => {\n    const num = parseFloat(marketCap || '0');\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M OKB`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}k OKB`;\n    return `${num.toFixed(1)} OKB`;\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 lg:py-24 bg-gradient-to-b from-background to-black/50\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <div key={i} className=\"glass-card p-6 rounded-2xl animate-pulse\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"w-12 h-12 bg-muted rounded-xl\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-16\"></div>\n                    <div className=\"h-3 bg-muted rounded w-12\"></div>\n                  </div>\n                </div>\n                <div className=\"h-10 bg-muted rounded mb-4\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded\"></div>\n                  <div className=\"h-2 bg-muted rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 lg:py-24 bg-gradient-to-b from-background to-black/50\" id=\"discover\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-12\">\n          <div>\n            <h2 className=\"text-3xl lg:text-4xl font-bold mb-4\">Discover Tokens</h2>\n            <p className=\"text-muted-foreground text-lg\">Find the next big meme token on the bonding curve</p>\n          </div>\n          \n          {/* Filters */}\n          <div className=\"flex flex-wrap gap-4 mt-6 lg:mt-0\">\n            <Select value={filterBy} onValueChange={setFilterBy}>\n              <SelectTrigger className=\"glass-card bg-transparent border-border w-40\" data-testid=\"filter-status\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Tokens</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"graduated\">Graduated</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"glass-card bg-transparent border-border w-40\" data-testid=\"sort-by\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"newest\">Newest</SelectItem>\n                <SelectItem value=\"volume\">Volume</SelectItem>\n                <SelectItem value=\"progress\">Progress</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search tokens...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"glass-card bg-transparent border-border pl-10 min-w-60\"\n                data-testid=\"input-search-tokens\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Results count */}\n        <div className=\"mb-6\">\n          <p className=\"text-muted-foreground\">\n            Showing {filteredTokens.length} token{filteredTokens.length !== 1 ? 's' : ''}\n          </p>\n        </div>\n\n        {/* Token Grid */}\n        {filteredTokens.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <Search className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No tokens found</h3>\n            <p className=\"text-muted-foreground\">Try adjusting your search or filters</p>\n          </div>\n        ) : (\n          <motion.div \n            className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5 }}\n          >\n            {filteredTokens.map((token: Token, index: number) => {\n              const progress = calculateProgress(token);\n              \n              return (\n                <motion.div\n                  key={token.id}\n                  className=\"glass-card p-6 rounded-2xl hover:bg-white/10 transition-all duration-300 token-card cursor-pointer\"\n                  onClick={() => onTokenSelect(token)}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1, duration: 0.5 }}\n                  whileHover={{ y: -4 }}\n                  data-testid={`token-card-${token.symbol}`}\n                >\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white font-bold\">\n                      {token.symbol.charAt(0)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-lg truncate\">{token.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{token.symbol}</p>\n                    </div>\n                    {token.isGraduated && (\n                      <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                        <GraduationCap className=\"h-3 w-3 mr-1\" />\n                        Graduated\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n                    {token.description || 'No description available'}\n                  </p>\n                  \n                  {!token.isGraduated && (\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>Progress</span>\n                        <span>{progress.toFixed(0)}%</span>\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-white to-gray-300 h-2 rounded-full transition-all duration-300\"\n                          style={{ width: `${progress}%` }}\n                        />\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <div className=\"text-muted-foreground\">Price</div>\n                      <div className=\"font-medium\">{formatPrice(token.currentPrice || '0')}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-muted-foreground\">\n                        {token.isGraduated ? '24h Volume' : 'Market Cap'}\n                      </div>\n                      <div className=\"font-medium\">\n                        {token.isGraduated \n                          ? formatMarketCap(token.volume24h || '0')\n                          : formatMarketCap(token.marketCap || '0')\n                        }\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              );\n            })}\n          </motion.div>\n        )}\n\n        {/* Load More */}\n        {filteredTokens.length > 0 && (\n          <div className=\"text-center mt-12\">\n            <Button\n              variant=\"ghost\"\n              className=\"glass-card hover:bg-white/10 px-8 py-4 rounded-2xl font-medium transition-all duration-300\"\n              data-testid=\"button-load-more\"\n            >\n              Load More Tokens\n            </Button>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":10783},"client/src/components/TradingModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAccount } from 'wagmi';\nimport { X, ArrowDown, ShoppingCart, TrendingDown } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { useBondingCurve } from '@/hooks/useBondingCurve';\nimport { toast } from '@/hooks/use-toast';\nimport type { Token } from '@shared/schema';\n\ninterface TradingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  token: Token | null;\n}\n\nexport default function TradingModal({ isOpen, onClose, token }: TradingModalProps) {\n  const { address, isConnected } = useAccount();\n  const [tradeType, setTradeType] = useState<'buy' | 'sell'>('buy');\n  const [payAmount, setPayAmount] = useState('');\n  const [receiveAmount, setReceiveAmount] = useState('');\n  const [isCalculating, setIsCalculating] = useState(false);\n\n  const {\n    calculateTrade,\n    slippageTolerance,\n    setSlippageTolerance,\n    buyTokens,\n    sellTokens,\n    isBuying,\n    isSelling,\n  } = useBondingCurve(token?.id);\n\n  // Mock user balances\n  const { data: userBalances } = useQuery({\n    queryKey: ['/api/portfolio', address],\n    enabled: isConnected && !!address,\n  });\n\n  const calculateProgress = () => {\n    if (!token) return 0;\n    const virtualOkb = parseFloat(token.virtualOkb);\n    const graduationThreshold = 80; // 80 OKB\n    return Math.min((virtualOkb / graduationThreshold) * 100, 100);\n  };\n\n  const handleAmountChange = async (value: string) => {\n    setPayAmount(value);\n    \n    if (!value || parseFloat(value) <= 0 || !token) {\n      setReceiveAmount('');\n      return;\n    }\n\n    setIsCalculating(true);\n    try {\n      const result = await calculateTrade(value, tradeType === 'buy');\n      setReceiveAmount(parseFloat(result.outputAmount).toFixed(6));\n    } catch (error) {\n      console.error('Calculation error:', error);\n      setReceiveAmount('');\n    } finally {\n      setIsCalculating(false);\n    }\n  };\n\n  const handleQuickAmount = (percentage: number) => {\n    // Mock balance calculation\n    const mockBalance = tradeType === 'buy' ? 10 : 1000; // 10 OKB or 1000 tokens\n    const amount = (mockBalance * percentage / 100).toString();\n    handleAmountChange(amount);\n  };\n\n  const handleTrade = () => {\n    if (!isConnected) {\n      toast({\n        title: 'Wallet not connected',\n        description: 'Please connect your wallet to trade',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!payAmount || !receiveAmount) {\n      toast({\n        title: 'Invalid amounts',\n        description: 'Please enter valid trade amounts',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const minReceived = (parseFloat(receiveAmount) * (100 - slippageTolerance) / 100).toString();\n\n    if (tradeType === 'buy') {\n      buyTokens({\n        okbAmount: payAmount,\n        minTokens: minReceived,\n      });\n    } else {\n      sellTokens({\n        tokenAmount: payAmount,\n        minOkb: minReceived,\n      });\n    }\n  };\n\n  const progress = calculateProgress();\n  const isLoading = isBuying || isSelling;\n\n  if (!token) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"glass-card-dark max-w-lg border-border\" data-testid=\"modal-trading\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white font-bold\">\n                {token.symbol.charAt(0)}\n              </div>\n              <div>\n                <DialogTitle className=\"text-xl font-bold\">{token.name}</DialogTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  {token.currentPrice ? `₪${parseFloat(token.currentPrice).toFixed(6)}` : 'Price loading...'}\n                </p>\n              </div>\n            </div>\n            {token.isGraduated && (\n              <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400\">\n                Graduated\n              </Badge>\n            )}\n          </div>\n        </DialogHeader>\n\n        {/* Bonding Curve Progress */}\n        {!token.isGraduated && (\n          <div className=\"mb-8\">\n            <div className=\"flex justify-between text-sm mb-2\">\n              <span>Bonding Curve Progress</span>\n              <span>{progress.toFixed(0)}% to graduation</span>\n            </div>\n            <div className=\"w-full bg-muted rounded-full h-3\">\n              <div \n                className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full relative transition-all duration-300\"\n                style={{ width: `${progress}%` }}\n              >\n                <div className=\"absolute right-0 top-1/2 transform -translate-y-1/2 w-4 h-4 bg-white rounded-full shadow-lg\"></div>\n              </div>\n            </div>\n            <div className=\"flex justify-between text-xs text-muted-foreground mt-2\">\n              <span>{parseFloat(token.virtualOkb).toFixed(1)} / 80 OKB</span>\n              <span>{(80 - parseFloat(token.virtualOkb)).toFixed(1)} OKB to DEX</span>\n            </div>\n          </div>\n        )}\n\n        {/* Trading Tabs */}\n        <Tabs value={tradeType} onValueChange={(value) => setTradeType(value as 'buy' | 'sell')}>\n          <TabsList className=\"glass-card w-full\">\n            <TabsTrigger value=\"buy\" className=\"flex-1\" data-testid=\"tab-buy\">\n              Buy\n            </TabsTrigger>\n            <TabsTrigger value=\"sell\" className=\"flex-1\" data-testid=\"tab-sell\">\n              Sell\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"buy\" className=\"space-y-6 mt-6\">\n            <TradingForm\n              tradeType=\"buy\"\n              payAmount={payAmount}\n              receiveAmount={receiveAmount}\n              isCalculating={isCalculating}\n              onAmountChange={handleAmountChange}\n              onQuickAmount={handleQuickAmount}\n              onTrade={handleTrade}\n              isLoading={isLoading}\n              isConnected={isConnected}\n              token={token}\n              slippageTolerance={slippageTolerance}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"sell\" className=\"space-y-6 mt-6\">\n            <TradingForm\n              tradeType=\"sell\"\n              payAmount={payAmount}\n              receiveAmount={receiveAmount}\n              isCalculating={isCalculating}\n              onAmountChange={handleAmountChange}\n              onQuickAmount={handleQuickAmount}\n              onTrade={handleTrade}\n              isLoading={isLoading}\n              isConnected={isConnected}\n              token={token}\n              slippageTolerance={slippageTolerance}\n            />\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface TradingFormProps {\n  tradeType: 'buy' | 'sell';\n  payAmount: string;\n  receiveAmount: string;\n  isCalculating: boolean;\n  onAmountChange: (value: string) => void;\n  onQuickAmount: (percentage: number) => void;\n  onTrade: () => void;\n  isLoading: boolean;\n  isConnected: boolean;\n  token: Token;\n  slippageTolerance: number;\n}\n\nfunction TradingForm({\n  tradeType,\n  payAmount,\n  receiveAmount,\n  isCalculating,\n  onAmountChange,\n  onQuickAmount,\n  onTrade,\n  isLoading,\n  isConnected,\n  token,\n  slippageTolerance,\n}: TradingFormProps) {\n  const payCurrency = tradeType === 'buy' ? 'OKB' : token.symbol;\n  const receiveCurrency = tradeType === 'buy' ? token.symbol : 'OKB';\n  const mockBalance = tradeType === 'buy' ? '12.45' : '1,250.00';\n\n  return (\n    <>\n      {/* You Pay */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">You Pay</label>\n        <div className=\"glass-card border border-border rounded-xl p-4\">\n          <div className=\"flex items-center justify-between\">\n            <Input\n              type=\"number\"\n              placeholder=\"0.0\"\n              value={payAmount}\n              onChange={(e) => onAmountChange(e.target.value)}\n              className=\"bg-transparent text-2xl font-medium border-none p-0 focus-visible:ring-0\"\n              step=\"0.0001\"\n              data-testid=\"input-pay-amount\"\n            />\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">{payCurrency}</span>\n            </div>\n          </div>\n          <div className=\"text-sm text-muted-foreground mt-2\">\n            Balance: {mockBalance} {payCurrency}\n          </div>\n        </div>\n      </div>\n\n      {/* Arrow */}\n      <div className=\"text-center\">\n        <ArrowDown className=\"h-5 w-5 text-muted-foreground mx-auto\" />\n      </div>\n\n      {/* You Receive */}\n      <div>\n        <label className=\"block text-sm font-medium mb-2\">You Receive</label>\n        <div className=\"glass-card border border-border rounded-xl p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-2xl font-medium\">\n              {isCalculating ? '...' : receiveAmount || '0.0'}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">{receiveCurrency}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Trade Details */}\n      <div className=\"glass-card p-4 rounded-xl space-y-2 text-sm\">\n        <div className=\"flex justify-between\">\n          <span className=\"text-muted-foreground\">Price Impact</span>\n          <span className=\"text-yellow-400\">~1.2%</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-muted-foreground\">Slippage Tolerance</span>\n          <span>{slippageTolerance}%</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-muted-foreground\">Minimum Received</span>\n          <span>\n            {receiveAmount \n              ? `~${(parseFloat(receiveAmount) * (100 - slippageTolerance) / 100).toFixed(6)} ${receiveCurrency}`\n              : '--'\n            }\n          </span>\n        </div>\n      </div>\n\n      {/* Quick Amount Buttons */}\n      <div className=\"grid grid-cols-4 gap-2\">\n        {[25, 50, 75, 100].map((percentage) => (\n          <Button\n            key={percentage}\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onQuickAmount(percentage)}\n            className=\"glass-card hover:bg-white/10\"\n            data-testid={`button-quick-${percentage}`}\n          >\n            {percentage === 100 ? 'MAX' : `${percentage}%`}\n          </Button>\n        ))}\n      </div>\n\n      {/* Action Button */}\n      <Button\n        onClick={onTrade}\n        disabled={isLoading || !isConnected || !payAmount || parseFloat(payAmount) <= 0}\n        className=\"w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600 py-4 text-lg\"\n        data-testid=\"button-execute-trade\"\n      >\n        {isLoading ? (\n          'Processing...'\n        ) : !isConnected ? (\n          'Connect Wallet'\n        ) : tradeType === 'buy' ? (\n          <>\n            <ShoppingCart className=\"mr-2 h-5 w-5\" />\n            Buy {token.symbol}\n          </>\n        ) : (\n          <>\n            <TrendingDown className=\"mr-2 h-5 w-5\" />\n            Sell {token.symbol}\n          </>\n        )}\n      </Button>\n    </>\n  );\n}\n","size_bytes":11754},"client/src/config/contracts.ts":{"content":"export const CONTRACTS = {\n  WOKB: '0x952E6c15BEA13B9A6077419456B59f46c43F2934',\n  REGISTRY: '0xF08511fb706A5a84Ae7738f8a6cA24D5162cc895',\n  TOKEN_FACTORY: '0x7689A7ce1d9a09e2B996cCCb6cD81c015D5E36d3',\n  BONDING_CURVE: '0xd64fd6b463aC54252FAB669a29d51Ae3373C3467',\n  LIQUIDITY_POOL: '0xDC225E7d4e3a1e5A65aC39F4B60E85f7657FFf0C',\n  USER_MANAGEMENT: '0x7231bB2Ebc50cB32731cf7303E077B0042ab6778',\n  FEE_MANAGER: '0xCaCbd1C17f36061593181B6E482DaB822815c9a5',\n  MARKET_GRADUATION: '0x7Df5fda5E528ba80E84C3462cA7D7454c5129c7b',\n} as const;\n\nexport const CONSTANTS = {\n  GRADUATION_THRESHOLD: '80000000000000000000', // 80 OKB\n  MAX_SUPPLY_FOR_CURVE: '800000000000000000000000000', // 800M tokens\n  DEFAULT_VIRTUAL_OKB: '30000000000000000000', // 30 OKB\n  DEFAULT_VIRTUAL_TOKENS: '1073000000000000000000000000', // 1.073B tokens\n  CREATION_FEE: '1000000000000000', // 0.001 OKB\n} as const;\n\n// ERC20 ABI for token interactions\nexport const ERC20_ABI = [\n  {\n    inputs: [{ name: \"spender\", type: \"address\" }, { name: \"amount\", type: \"uint256\" }],\n    name: \"approve\",\n    outputs: [{ name: \"\", type: \"bool\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ name: \"account\", type: \"address\" }],\n    name: \"balanceOf\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [{ name: \"\", type: \"uint8\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [{ name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [{ name: \"\", type: \"string\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\n// Bonding Curve Contract ABI\nexport const BONDING_CURVE_ABI = [\n  {\n    inputs: [\n      { name: \"tokenAddress\", type: \"address\" },\n      { name: \"okbAmount\", type: \"uint256\" },\n      { name: \"minTokens\", type: \"uint256\" }\n    ],\n    name: \"buyTokens\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { name: \"tokenAddress\", type: \"address\" },\n      { name: \"tokenAmount\", type: \"uint256\" },\n      { name: \"minOkb\", type: \"uint256\" }\n    ],\n    name: \"sellTokens\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { name: \"tokenAddress\", type: \"address\" },\n      { name: \"okbAmount\", type: \"uint256\" },\n      { name: \"isBuy\", type: \"bool\" }\n    ],\n    name: \"calculateTokens\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n\n// Token Factory ABI\nexport const TOKEN_FACTORY_ABI = [\n  {\n    inputs: [\n      { name: \"name\", type: \"string\" },\n      { name: \"symbol\", type: \"string\" },\n      { name: \"description\", type: \"string\" },\n      { name: \"imageUrl\", type: \"string\" }\n    ],\n    name: \"createToken\",\n    outputs: [{ name: \"\", type: \"address\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n] as const;\n","size_bytes":3222},"client/src/config/wagmi.ts":{"content":"import { getDefaultConfig } from '@rainbow-me/rainbowkit';\nimport { defineChain } from 'viem';\n\n// X Layer network configuration\nexport const xLayer = defineChain({\n  id: 196,\n  name: 'X Layer',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'OKB',\n    symbol: 'OKB',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://rpc.xlayer.tech'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'OKLink',\n      url: 'https://www.oklink.com/xlayer',\n    },\n  },\n});\n\nexport const wagmiConfig = getDefaultConfig({\n  appName: 'Xcelerate',\n  projectId: import.meta.env.VITE_WALLET_CONNECT_PROJECT_ID || 'default-project-id',\n  chains: [xLayer],\n  ssr: false,\n});\n","size_bytes":666},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useBondingCurve.ts":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAccount, useWriteContract, useWaitForTransactionReceipt } from 'wagmi';\nimport { parseEther, formatEther } from 'viem';\nimport { apiRequest } from '@/lib/queryClient';\nimport { CONTRACTS, BONDING_CURVE_ABI, ERC20_ABI } from '@/config/contracts';\nimport { toast } from '@/hooks/use-toast';\n\ninterface BondingCurveCalculation {\n  outputAmount: string;\n  newPrice: string;\n  priceImpact: string;\n  minimumReceived: string;\n}\n\nexport function useBondingCurve(tokenId?: string) {\n  const { address } = useAccount();\n  const queryClient = useQueryClient();\n  const { writeContract, data: txHash, isPending: isWriting } = useWriteContract();\n  \n  const [slippageTolerance, setSlippageTolerance] = useState(2.0); // 2%\n\n  // Wait for transaction confirmation\n  const { isLoading: isConfirming, isSuccess } = useWaitForTransactionReceipt({\n    hash: txHash,\n  });\n\n  // Calculate bonding curve output\n  const calculateTrade = async (okbAmount: string, isBuy: boolean): Promise<BondingCurveCalculation> => {\n    if (!tokenId || !okbAmount || parseFloat(okbAmount) <= 0) {\n      throw new Error('Invalid parameters');\n    }\n\n    const response = await apiRequest('POST', '/api/bonding-curve/calculate', {\n      tokenId,\n      okbAmount,\n      isBuy,\n    });\n\n    return response.json();\n  };\n\n  // Get real-time calculation\n  const { data: calculation, isLoading: isCalculating } = useQuery({\n    queryKey: ['/api/bonding-curve/calculate', tokenId],\n    enabled: false, // Manual trigger\n  });\n\n  // Buy tokens mutation\n  const buyMutation = useMutation({\n    mutationFn: async ({ okbAmount, minTokens }: { okbAmount: string; minTokens: string }) => {\n      if (!address || !tokenId) throw new Error('Wallet not connected or token not selected');\n\n      // Get token details first\n      const tokenResponse = await fetch(`/api/tokens/${tokenId}`);\n      const token = await tokenResponse.json();\n\n      // Execute contract call\n      writeContract({\n        address: CONTRACTS.BONDING_CURVE,\n        abi: BONDING_CURVE_ABI,\n        functionName: 'buyTokens',\n        args: [token.address, parseEther(okbAmount), parseEther(minTokens)],\n        value: parseEther(okbAmount),\n      });\n\n      return { okbAmount, minTokens, token };\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Buy Order Submitted',\n        description: `Buying ${data.token.symbol} for ${data.okbAmount} OKB`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Buy Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Sell tokens mutation\n  const sellMutation = useMutation({\n    mutationFn: async ({ tokenAmount, minOkb }: { tokenAmount: string; minOkb: string }) => {\n      if (!address || !tokenId) throw new Error('Wallet not connected or token not selected');\n\n      // Get token details first\n      const tokenResponse = await fetch(`/api/tokens/${tokenId}`);\n      const token = await tokenResponse.json();\n\n      // First approve tokens if needed\n      writeContract({\n        address: token.address,\n        abi: ERC20_ABI,\n        functionName: 'approve',\n        args: [CONTRACTS.BONDING_CURVE, parseEther(tokenAmount)],\n      });\n\n      // Then sell (in real app, wait for approval first)\n      writeContract({\n        address: CONTRACTS.BONDING_CURVE,\n        abi: BONDING_CURVE_ABI,\n        functionName: 'sellTokens',\n        args: [token.address, parseEther(tokenAmount), parseEther(minOkb)],\n      });\n\n      return { tokenAmount, minOkb, token };\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Sell Order Submitted',\n        description: `Selling ${data.tokenAmount} ${data.token.symbol}`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Sell Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Record trade after successful transaction\n  const recordTrade = useMutation({\n    mutationFn: async (tradeData: {\n      tokenId: string;\n      type: 'buy' | 'sell';\n      okbAmount: string;\n      tokenAmount: string;\n      price: string;\n      txHash: string;\n    }) => {\n      if (!address) throw new Error('Wallet not connected');\n\n      const response = await apiRequest('POST', '/api/trades', {\n        ...tradeData,\n        userWallet: address,\n      });\n\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: ['/api/portfolio', address] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tokens', tokenId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/trades'] });\n    },\n  });\n\n  // Effect to record trade when transaction succeeds\n  // In real app, you'd use useEffect to watch for transaction success\n\n  return {\n    calculateTrade,\n    calculation,\n    isCalculating,\n    slippageTolerance,\n    setSlippageTolerance,\n    \n    // Trading functions\n    buyTokens: buyMutation.mutate,\n    sellTokens: sellMutation.mutate,\n    isBuying: buyMutation.isPending || isWriting || isConfirming,\n    isSelling: sellMutation.isPending || isWriting || isConfirming,\n    \n    // Transaction status\n    txHash,\n    isSuccess,\n    \n    // Trade recording\n    recordTrade: recordTrade.mutate,\n  };\n}\n","size_bytes":5388},"client/src/hooks/useWallet.ts":{"content":"import { useAccount, useConnect, useDisconnect } from 'wagmi';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport function useWallet() {\n  const { address, isConnected } = useAccount();\n  const { connect, connectors } = useConnect();\n  const { disconnect } = useDisconnect();\n  const queryClient = useQueryClient();\n\n  // Get or create user when wallet connects\n  const { data: user, isLoading: isLoadingUser } = useQuery({\n    queryKey: ['/api/users', address],\n    enabled: isConnected && !!address,\n    queryFn: async () => {\n      if (!address) return null;\n      \n      try {\n        const response = await fetch(`/api/users/${address}`);\n        if (response.ok) {\n          return response.json();\n        }\n        \n        // User doesn't exist, create new one\n        const createResponse = await apiRequest('POST', '/api/users', {\n          walletAddress: address,\n        });\n        return createResponse.json();\n      } catch (error) {\n        console.error('Error fetching/creating user:', error);\n        return null;\n      }\n    },\n  });\n\n  const connectWallet = (connectorId?: string) => {\n    const connector = connectors.find(c => c.id === connectorId) || connectors[0];\n    if (connector) {\n      connect({ connector });\n    }\n  };\n\n  const disconnectWallet = () => {\n    disconnect();\n    queryClient.clear();\n  };\n\n  return {\n    address,\n    isConnected,\n    user,\n    isLoadingUser,\n    connectWallet,\n    disconnectWallet,\n    connectors,\n  };\n}\n","size_bytes":1556},"client/src/lib/constants.ts":{"content":"import { parseEther } from 'viem';\n\n// Network constants\nexport const NETWORK_CONFIG = {\n  CHAIN_ID: 196,\n  NAME: 'X Layer',\n  RPC_URL: 'https://rpc.xlayer.tech',\n  EXPLORER_URL: 'https://www.oklink.com/xlayer',\n  NATIVE_CURRENCY: {\n    name: 'OKB',\n    symbol: 'OKB',\n    decimals: 18,\n  },\n} as const;\n\n// Contract constants\nexport const BONDING_CURVE_CONSTANTS = {\n  GRADUATION_THRESHOLD: parseEther('80'), // 80 OKB\n  MAX_SUPPLY_FOR_CURVE: parseEther('800000000'), // 800M tokens\n  DEFAULT_VIRTUAL_OKB: parseEther('30'), // 30 OKB\n  DEFAULT_VIRTUAL_TOKENS: parseEther('1073000000'), // 1.073B tokens\n  CREATION_FEE: parseEther('0.001'), // 0.001 OKB\n} as const;\n\n// Fee distribution percentages\nexport const FEE_DISTRIBUTION = {\n  PLATFORM: 2.0, // 2%\n  CREATOR: 1.0, // 1%\n  STAKERS: 1.0, // 1%\n  LIQUIDITY_PROVIDERS: 0.5, // 0.5%\n  REFERRERS: 0.5, // 0.5%\n} as const;\n\n// Trading constants\nexport const TRADING_CONSTANTS = {\n  DEFAULT_SLIPPAGE: 2.0, // 2%\n  MAX_SLIPPAGE: 10.0, // 10%\n  MIN_SLIPPAGE: 0.1, // 0.1%\n  SLIPPAGE_STEP: 0.1,\n  MIN_TRADE_AMOUNT: parseEther('0.0001'), // 0.0001 OKB\n  MAX_TRADE_AMOUNT: parseEther('1000'), // 1000 OKB\n} as const;\n\n// UI constants\nexport const UI_CONSTANTS = {\n  REFRESH_INTERVALS: {\n    STATS: 30000, // 30 seconds\n    TOKENS: 10000, // 10 seconds\n    PORTFOLIO: 15000, // 15 seconds\n    TRADES: 5000, // 5 seconds\n  },\n  PAGINATION: {\n    TOKENS_PER_PAGE: 20,\n    TRADES_PER_PAGE: 50,\n    LEADERBOARD_SIZE: 10,\n  },\n  FORMATTING: {\n    DECIMAL_PLACES: {\n      PRICE: 6,\n      AMOUNT: 4,\n      PERCENTAGE: 2,\n    },\n    LARGE_NUMBER_THRESHOLD: 1000,\n  },\n} as const;\n\n// Token validation constants\nexport const TOKEN_VALIDATION = {\n  NAME: {\n    MIN_LENGTH: 1,\n    MAX_LENGTH: 50,\n  },\n  SYMBOL: {\n    MIN_LENGTH: 1,\n    MAX_LENGTH: 10,\n    PATTERN: /^[A-Z0-9]+$/,\n  },\n  DESCRIPTION: {\n    MAX_LENGTH: 500,\n  },\n  IMAGE: {\n    MAX_SIZE: 10 * 1024 * 1024, // 10MB\n    ALLOWED_TYPES: ['image/png', 'image/jpg', 'image/jpeg', 'image/gif', 'image/webp'],\n  },\n} as const;\n\n// Analytics constants\nexport const ANALYTICS_CONSTANTS = {\n  TIME_PERIODS: {\n    '1D': 1,\n    '7D': 7,\n    '30D': 30,\n    '90D': 90,\n    '1Y': 365,\n  },\n  CHART_POINTS: {\n    '1D': 24, // Hourly data\n    '7D': 7, // Daily data\n    '30D': 30, // Daily data\n    '90D': 90, // Daily data\n    '1Y': 12, // Monthly data\n  },\n} as const;\n\n// Error messages\nexport const ERROR_MESSAGES = {\n  WALLET: {\n    NOT_CONNECTED: 'Please connect your wallet to continue',\n    WRONG_NETWORK: 'Please switch to X Layer network',\n    INSUFFICIENT_BALANCE: 'Insufficient balance for this transaction',\n    TRANSACTION_REJECTED: 'Transaction was rejected by user',\n  },\n  TRADING: {\n    INVALID_AMOUNT: 'Please enter a valid amount',\n    AMOUNT_TOO_LOW: 'Amount is below minimum trade size',\n    AMOUNT_TOO_HIGH: 'Amount exceeds maximum trade size',\n    SLIPPAGE_TOO_HIGH: 'Slippage tolerance is too high',\n    PRICE_IMPACT_HIGH: 'Price impact is very high, consider reducing trade size',\n  },\n  TOKEN_CREATION: {\n    INVALID_NAME: 'Token name is required and must be under 50 characters',\n    INVALID_SYMBOL: 'Token symbol must be 1-10 uppercase alphanumeric characters',\n    DESCRIPTION_TOO_LONG: 'Description must be under 500 characters',\n    IMAGE_TOO_LARGE: 'Image file must be under 10MB',\n    INVALID_IMAGE_TYPE: 'Please upload a PNG, JPG, or GIF image',\n    CREATION_FAILED: 'Failed to create token. Please try again.',\n  },\n  GENERAL: {\n    NETWORK_ERROR: 'Network error. Please check your connection and try again.',\n    UNKNOWN_ERROR: 'An unexpected error occurred. Please try again.',\n    RATE_LIMITED: 'Too many requests. Please wait a moment and try again.',\n  },\n} as const;\n\n// Success messages\nexport const SUCCESS_MESSAGES = {\n  TOKEN_CREATED: 'Token created successfully! It\\'s now live on the bonding curve.',\n  TRADE_SUCCESSFUL: 'Trade executed successfully!',\n  WALLET_CONNECTED: 'Wallet connected successfully',\n  SETTINGS_SAVED: 'Settings saved successfully',\n} as const;\n\n// Local storage keys\nexport const STORAGE_KEYS = {\n  SLIPPAGE_TOLERANCE: 'xcelerate_slippage_tolerance',\n  THEME: 'xcelerate_theme',\n  DISMISSED_WARNINGS: 'xcelerate_dismissed_warnings',\n  RECENT_TOKENS: 'xcelerate_recent_tokens',\n} as const;\n\n// External URLs\nexport const EXTERNAL_URLS = {\n  DOCUMENTATION: 'https://docs.xcelerate.io',\n  GITHUB: 'https://github.com/xcelerate-platform',\n  TWITTER: 'https://twitter.com/xceleratexlayer',\n  DISCORD: 'https://discord.gg/xcelerate',\n  TELEGRAM: 'https://t.me/xcelerate',\n  OKLINK_EXPLORER: 'https://www.oklink.com/xlayer',\n} as const;\n\n// Theme constants\nexport const THEME_CONFIG = {\n  GLASSMORPHISM: {\n    BACKDROP_BLUR: 'blur(20px)',\n    BACKGROUND_OPACITY: 0.05,\n    BORDER_OPACITY: 0.1,\n    SHADOW: '0 8px 32px 0 rgba(0, 0, 0, 0.37)',\n  },\n  GRADIENTS: {\n    PRIMARY: 'linear-gradient(135deg, #ffffff 0%, #a0a0a0 100%)',\n    HERO: 'linear-gradient(135deg, #000000 0%, #1a1a1a 50%, #2d2d2d 100%)',\n    BUTTON: 'linear-gradient(135deg, #3b82f6 0%, #8b5cf6 100%)',\n  },\n  ANIMATIONS: {\n    DURATION: {\n      FAST: '0.2s',\n      NORMAL: '0.3s',\n      SLOW: '0.5s',\n    },\n    EASING: {\n      EASE_OUT: 'cubic-bezier(0.4, 0, 0.2, 1)',\n      EASE_IN_OUT: 'cubic-bezier(0.4, 0, 0.6, 1)',\n      BOUNCE: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',\n    },\n  },\n} as const;\n\n// API endpoints\nexport const API_ENDPOINTS = {\n  TOKENS: '/api/tokens',\n  USERS: '/api/users',\n  TRADES: '/api/trades',\n  PORTFOLIO: '/api/portfolio',\n  STATS: '/api/stats',\n  BONDING_CURVE: '/api/bonding-curve',\n} as const;\n\n// WebSocket events (for future real-time features)\nexport const WS_EVENTS = {\n  PRICE_UPDATE: 'price_update',\n  NEW_TRADE: 'new_trade',\n  TOKEN_GRADUATED: 'token_graduated',\n  NEW_TOKEN: 'new_token',\n} as const;\n\n// Utility functions for constants\nexport function getFormattedNetworkName(): string {\n  return `${NETWORK_CONFIG.NAME} (${NETWORK_CONFIG.CHAIN_ID})`;\n}\n\nexport function getExplorerUrl(type: 'tx' | 'address' | 'token', hash: string): string {\n  const baseUrl = NETWORK_CONFIG.EXPLORER_URL;\n  switch (type) {\n    case 'tx':\n      return `${baseUrl}/tx/${hash}`;\n    case 'address':\n      return `${baseUrl}/address/${hash}`;\n    case 'token':\n      return `${baseUrl}/token/${hash}`;\n    default:\n      return baseUrl;\n  }\n}\n\nexport function formatSlippage(slippage: number): string {\n  return `${slippage.toFixed(1)}%`;\n}\n\nexport function isValidSlippage(slippage: number): boolean {\n  return slippage >= TRADING_CONSTANTS.MIN_SLIPPAGE && slippage <= TRADING_CONSTANTS.MAX_SLIPPAGE;\n}\n\nexport function getRefreshInterval(type: keyof typeof UI_CONSTANTS.REFRESH_INTERVALS): number {\n  return UI_CONSTANTS.REFRESH_INTERVALS[type];\n}\n","size_bytes":6686},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/web3.ts":{"content":"import { formatUnits, parseUnits, type Address, type Hash } from 'viem';\nimport { usePublicClient, useWalletClient } from 'wagmi';\nimport { CONTRACTS, ERC20_ABI, BONDING_CURVE_ABI, TOKEN_FACTORY_ABI } from '@/config/contracts';\n\nexport interface TokenInfo {\n  name: string;\n  symbol: string;\n  decimals: number;\n  totalSupply: bigint;\n  balance?: bigint;\n}\n\nexport interface BondingCurveState {\n  virtualOkb: bigint;\n  virtualTokens: bigint;\n  realOkb: bigint;\n  isGraduated: boolean;\n}\n\nexport class Web3Service {\n  private publicClient: any;\n  private walletClient: any;\n\n  constructor(publicClient: any, walletClient: any) {\n    this.publicClient = publicClient;\n    this.walletClient = walletClient;\n  }\n\n  // Token operations\n  async getTokenInfo(tokenAddress: Address, userAddress?: Address): Promise<TokenInfo> {\n    const [name, symbol, decimals, totalSupply, balance] = await Promise.all([\n      this.publicClient.readContract({\n        address: tokenAddress,\n        abi: ERC20_ABI,\n        functionName: 'name',\n      }),\n      this.publicClient.readContract({\n        address: tokenAddress,\n        abi: ERC20_ABI,\n        functionName: 'symbol',\n      }),\n      this.publicClient.readContract({\n        address: tokenAddress,\n        abi: ERC20_ABI,\n        functionName: 'decimals',\n      }),\n      this.publicClient.readContract({\n        address: tokenAddress,\n        abi: ERC20_ABI,\n        functionName: 'totalSupply',\n      }),\n      userAddress ? this.publicClient.readContract({\n        address: tokenAddress,\n        abi: ERC20_ABI,\n        functionName: 'balanceOf',\n        args: [userAddress],\n      }) : undefined,\n    ]);\n\n    return {\n      name,\n      symbol,\n      decimals,\n      totalSupply,\n      balance,\n    };\n  }\n\n  async approveToken(tokenAddress: Address, spender: Address, amount: bigint): Promise<Hash> {\n    const { request } = await this.publicClient.simulateContract({\n      address: tokenAddress,\n      abi: ERC20_ABI,\n      functionName: 'approve',\n      args: [spender, amount],\n      account: this.walletClient.account,\n    });\n\n    return await this.walletClient.writeContract(request);\n  }\n\n  async getTokenAllowance(tokenAddress: Address, owner: Address, spender: Address): Promise<bigint> {\n    return await this.publicClient.readContract({\n      address: tokenAddress,\n      abi: ERC20_ABI,\n      functionName: 'allowance',\n      args: [owner, spender],\n    });\n  }\n\n  // Bonding curve operations\n  async getBondingCurveState(tokenAddress: Address): Promise<BondingCurveState> {\n    // In a real implementation, this would read from the bonding curve contract\n    // For now, return mock data\n    return {\n      virtualOkb: parseUnits('30', 18),\n      virtualTokens: parseUnits('1073000000', 18),\n      realOkb: parseUnits('0', 18),\n      isGraduated: false,\n    };\n  }\n\n  async calculateBondingCurveOutput(\n    tokenAddress: Address,\n    inputAmount: bigint,\n    isBuy: boolean\n  ): Promise<bigint> {\n    return await this.publicClient.readContract({\n      address: CONTRACTS.BONDING_CURVE,\n      abi: BONDING_CURVE_ABI,\n      functionName: 'calculateTokens',\n      args: [tokenAddress, inputAmount, isBuy],\n    });\n  }\n\n  async buyTokens(\n    tokenAddress: Address,\n    okbAmount: bigint,\n    minTokens: bigint\n  ): Promise<Hash> {\n    const { request } = await this.publicClient.simulateContract({\n      address: CONTRACTS.BONDING_CURVE,\n      abi: BONDING_CURVE_ABI,\n      functionName: 'buyTokens',\n      args: [tokenAddress, okbAmount, minTokens],\n      value: okbAmount,\n      account: this.walletClient.account,\n    });\n\n    return await this.walletClient.writeContract(request);\n  }\n\n  async sellTokens(\n    tokenAddress: Address,\n    tokenAmount: bigint,\n    minOkb: bigint\n  ): Promise<Hash> {\n    // First check and approve if needed\n    const allowance = await this.getTokenAllowance(\n      tokenAddress,\n      this.walletClient.account.address,\n      CONTRACTS.BONDING_CURVE\n    );\n\n    if (allowance < tokenAmount) {\n      await this.approveToken(tokenAddress, CONTRACTS.BONDING_CURVE, tokenAmount);\n    }\n\n    const { request } = await this.publicClient.simulateContract({\n      address: CONTRACTS.BONDING_CURVE,\n      abi: BONDING_CURVE_ABI,\n      functionName: 'sellTokens',\n      args: [tokenAddress, tokenAmount, minOkb],\n      account: this.walletClient.account,\n    });\n\n    return await this.walletClient.writeContract(request);\n  }\n\n  // Token factory operations\n  async createToken(\n    name: string,\n    symbol: string,\n    description: string,\n    imageUrl: string,\n    creationFee: bigint\n  ): Promise<Hash> {\n    const { request } = await this.publicClient.simulateContract({\n      address: CONTRACTS.TOKEN_FACTORY,\n      abi: TOKEN_FACTORY_ABI,\n      functionName: 'createToken',\n      args: [name, symbol, description, imageUrl],\n      value: creationFee,\n      account: this.walletClient.account,\n    });\n\n    return await this.walletClient.writeContract(request);\n  }\n\n  // Utility functions\n  formatTokenAmount(amount: bigint, decimals: number): string {\n    return formatUnits(amount, decimals);\n  }\n\n  parseTokenAmount(amount: string, decimals: number): bigint {\n    return parseUnits(amount, decimals);\n  }\n\n  formatOkbAmount(amount: bigint): string {\n    return formatUnits(amount, 18);\n  }\n\n  parseOkbAmount(amount: string): bigint {\n    return parseUnits(amount, 18);\n  }\n}\n\n// Hook to use Web3Service\nexport function useWeb3Service() {\n  const publicClient = usePublicClient();\n  const { data: walletClient } = useWalletClient();\n\n  if (!publicClient) {\n    throw new Error('Public client not available');\n  }\n\n  return new Web3Service(publicClient, walletClient);\n}\n\n// Utility functions for bonding curve calculations\nexport function calculateBondingCurvePrice(virtualOkb: bigint, virtualTokens: bigint): number {\n  const okbFloat = parseFloat(formatUnits(virtualOkb, 18));\n  const tokensFloat = parseFloat(formatUnits(virtualTokens, 18));\n  return okbFloat / tokensFloat;\n}\n\nexport function calculateMarketCap(virtualOkb: bigint, virtualTokens: bigint, totalSupply: bigint): number {\n  const price = calculateBondingCurvePrice(virtualOkb, virtualTokens);\n  const totalFloat = parseFloat(formatUnits(totalSupply, 18));\n  return price * totalFloat;\n}\n\nexport function calculateProgress(virtualOkb: bigint, graduationThreshold: bigint): number {\n  const current = parseFloat(formatUnits(virtualOkb, 18));\n  const threshold = parseFloat(formatUnits(graduationThreshold, 18));\n  return Math.min((current / threshold) * 100, 100);\n}\n\n// Transaction helper functions\nexport async function waitForTransaction(hash: Hash, publicClient: any): Promise<any> {\n  return await publicClient.waitForTransactionReceipt({ hash });\n}\n\nexport function isTransactionSuccessful(receipt: any): boolean {\n  return receipt.status === 'success';\n}\n\n// Error handling utilities\nexport function parseContractError(error: any): string {\n  if (error.message.includes('User rejected')) {\n    return 'Transaction was rejected by user';\n  }\n  \n  if (error.message.includes('insufficient funds')) {\n    return 'Insufficient funds for transaction';\n  }\n  \n  if (error.message.includes('execution reverted')) {\n    return 'Transaction failed - check parameters and try again';\n  }\n  \n  return error.message || 'Transaction failed';\n}\n\nexport { type Address, type Hash };\n","size_bytes":7333},"client/src/pages/Landing.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport Header from '@/components/Header';\nimport Hero from '@/components/Hero';\nimport TokenGrid from '@/components/TokenGrid';\nimport CreateTokenModal from '@/components/CreateTokenModal';\nimport TradingModal from '@/components/TradingModal';\nimport Portfolio from '@/components/Portfolio';\nimport Analytics from '@/components/Analytics';\nimport { Button } from '@/components/ui/button';\nimport { Rocket, Twitter, MessageCircle, Send, Github } from 'lucide-react';\nimport type { Token } from '@shared/schema';\n\nexport default function Landing() {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isTradingModalOpen, setIsTradingModalOpen] = useState(false);\n  const [selectedToken, setSelectedToken] = useState<Token | null>(null);\n  const [activeSection, setActiveSection] = useState('hero');\n\n  const handleCreateClick = () => {\n    setIsCreateModalOpen(true);\n  };\n\n  const handleDiscoverClick = () => {\n    const discoverSection = document.getElementById('discover');\n    if (discoverSection) {\n      discoverSection.scrollIntoView({ behavior: 'smooth' });\n      setActiveSection('discover');\n    }\n  };\n\n  const handleTokenSelect = (token: Token) => {\n    setSelectedToken(token);\n    setIsTradingModalOpen(true);\n  };\n\n  const handleCloseTradingModal = () => {\n    setIsTradingModalOpen(false);\n    setSelectedToken(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header onCreateClick={handleCreateClick} onDiscoverClick={handleDiscoverClick} />\n      \n      <main>\n        {/* Hero Section */}\n        <Hero onCreateClick={handleCreateClick} onDiscoverClick={handleDiscoverClick} />\n        \n        {/* Token Discovery Section */}\n        <TokenGrid onTokenSelect={handleTokenSelect} />\n        \n        {/* Portfolio Section */}\n        <Portfolio />\n        \n        {/* Analytics Section */}\n        <Analytics />\n      </main>\n\n      {/* Footer */}\n      <footer className=\"glass-card-dark border-t border-border py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"col-span-1 md:col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-white to-gray-300 flex items-center justify-center\">\n                  <Rocket className=\"text-black text-lg\" />\n                </div>\n                <span className=\"text-xl font-bold gradient-text\">Xcelerate</span>\n              </div>\n              <p className=\"text-muted-foreground mb-6 max-w-md\">\n                The modern meme token launchpad on X Layer. Create, trade, and graduate your tokens to DEX automatically.\n              </p>\n              <div className=\"flex space-x-4\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"link-twitter\"\n                >\n                  <Twitter className=\"h-5 w-5\" />\n                </Button>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"link-discord\"\n                >\n                  <MessageCircle className=\"h-5 w-5\" />\n                </Button>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"link-telegram\"\n                >\n                  <Send className=\"h-5 w-5\" />\n                </Button>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  data-testid=\"link-github\"\n                >\n                  <Github className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Platform</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>\n                  <button \n                    onClick={handleCreateClick}\n                    className=\"hover:text-foreground transition-colors text-left\"\n                    data-testid=\"footer-create-token\"\n                  >\n                    Create Token\n                  </button>\n                </li>\n                <li>\n                  <button \n                    onClick={handleDiscoverClick}\n                    className=\"hover:text-foreground transition-colors text-left\"\n                    data-testid=\"footer-discover\"\n                  >\n                    Discover\n                  </button>\n                </li>\n                <li>\n                  <button className=\"hover:text-foreground transition-colors text-left\" data-testid=\"footer-portfolio\">\n                    Portfolio\n                  </button>\n                </li>\n                <li>\n                  <button className=\"hover:text-foreground transition-colors text-left\" data-testid=\"footer-analytics\">\n                    Analytics\n                  </button>\n                </li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-docs\">\n                    Documentation\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-api\">\n                    API\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-contracts\">\n                    Smart Contracts\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-support\">\n                    Support\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-border pt-8 mt-8 flex flex-col sm:flex-row justify-between items-center\">\n            <div className=\"text-sm text-muted-foreground\">\n              © 2024 Xcelerate. All rights reserved.\n            </div>\n            <div className=\"flex space-x-6 text-sm text-muted-foreground mt-4 sm:mt-0\">\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-privacy\">\n                Privacy Policy\n              </a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-terms\">\n                Terms of Service\n              </a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"footer-security\">\n                Security\n              </a>\n            </div>\n          </div>\n        </div>\n      </footer>\n\n      {/* Modals */}\n      <CreateTokenModal \n        isOpen={isCreateModalOpen} \n        onClose={() => setIsCreateModalOpen(false)} \n      />\n      \n      <TradingModal \n        isOpen={isTradingModalOpen} \n        onClose={handleCloseTradingModal}\n        token={selectedToken}\n      />\n    </div>\n  );\n}\n","size_bytes":7746},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/viem.d.ts":{"content":"declare module \"viem\";\n","size_bytes":23},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}